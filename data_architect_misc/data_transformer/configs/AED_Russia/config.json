[
  {
    "__comment__": "(Required IF NOT provided as an argument via commandline)",
    "__comment__": "Input folder and file name or file name pattern such as 'SWI_N_ALL_INV*.xlsx' (to process multiple files using the same configuration).",
    "__comment__": "You can skip the two config parameters below related to input folder and file if you run the program like as follow:",
    "__comment__": "E.g., >> python transform.py -c configs/common_qa_config.json -i ./path/to/input/file/input_data_file.xlsx",
    "input_folder_path": "./input/AED_Russia/",
    "input_file_name_or_pattern": "Russia_2019FY_20200402.xlsx",

    "__comment__": "(Optional) Enter sheet name to process from input Excel file. Default is the first sheet.",
    "sheet_name_of_input_excel_file": "Base ",

    "__comment__": "(Optional) Enter sheet name for the output Excel file. Default is 'Sheet1'.",
    "sheet_name_of_output_excel_file": "Sheet1",

    "__comment__": "(Optional) Boolean flag telling if we should write data to a destination place. Default is always True.",
    "write_output": true,

    "__comment__": "(Optional) Relative path (from folder in which transform.py resides) and file name of DataWriter class that has write_data method implemented.",
    "__comment__": "Default is DataWriter class (implemented in 'csv_data_writer.py') which writes transformed data to local file in CSV format.",
    "__comment__": "This option is only for those who wants to write data to somewhere other than to a local file in CSV format.",
    "__comment__": "TODO: later change this to csv_data_writer",
    "data_writer_class_file": "./csv_data_writer.py",

    "__comment__": "(Optional) Relative path of output folder if the data is going to be written to a file. Default is going to be the current working directory of transform.py",
    "__comment__": "Default is going to be the current working directory of transform.py",
    "output_folder_path": "./output/AED_Russia/",

    "__comment__": "(Optional) Prefix for the output file name.",
    "output_file_name_prefix": "transformed_Russia_2019FY_",

    "__comment__": "(Optional) Path+name of that has **CUSTOM** functions for data transformation, which will be imported and used in the transform process.",
    "custom_transform_functions_file": "./transform_functions/aed_russia_transform_functions.py",

    "__comment__": "(Optional) Enter the row index (starting from 0) to extract column headers from. Default is 0 (the first row).",
    "__comment__": "If this value is NOT provided, program will assume there is no header row in the input file",
    "row_index_to_extract_column_headers": 0,

    "__comment__": "(Optional) Specify which row index (starting from 0) the data begins. Default is 1 (the second row) because that's where the data usually begins in files.",
    "row_index_where_data_starts": 1,

    "__comment__": "(Optional) Specify how many rows we should ignore at the bottom of the data file. Default is 0.",
    "num_of_rows_to_skip_from_the_bottom": 0,

    "__comment__": "(Required) List of the functions and their parameters.",
    "__comment__": "These functions must be defined either in transform_functions.py or individual task's transform file such as ./transform_function/aed_gcc_transform_functions.py",
    "functions_to_apply": [
      {
        "__function_comment__": "Data files sometimes have empty columns. We need to drop them first",
        "function_name": "drop_unnamed_columns"
      },
      {
        "__function_comment__": "By the time we run this function, there should be only 13 columns total remaining in the raw data frame.",
        "function_name": "assert_number_of_columns_equals",
        "function_args": [12]
      },
      {
        "__function_comment__": "Add DATE column by combining YEAR and MONTH columns in Russia raw data file.",
        "function_name": "add_date_column_with_date_value_derived_from_existing_year_and_month_cols_with_int_values",
        "function_args": ["YEAR", "MONTH"]
      },
      {
        "__function_comment__": "Add PROCESSED_DATE column representing today's date.",
        "function_name": "add_date_column_with_current_date",
        "function_args": []
      },
      {
        "__function_comment__": "Add HARMONIZED_REGION as a new column with 'AED' as value.",
        "function_name": "add_new_column_with_fixed_str_value",
        "function_args": ["HARMONIZED_REGION","Africa-Eurasia"]
      },
      {
        "__function_comment__": "Add HARMONIZED_COUNTRY as a new column with 'AED' as value.",
        "function_name": "add_new_column_with_fixed_str_value",
        "function_args": ["HARMONIZED_COUNTRY","Russia"]
      },
      {
        "__function_comment__": "TODO: Later on replace this function below with case-insensitive one. Add HARMONIZED_ADVERTISER column that have uppercase-d advertiser names with all global compete advertisers mapped to their standard names.",
        "function_name": "add_new_column_based_on_another_column_values",
        "function_args": [
          "ADVERTISERS IN SCOPE",
          "HARMONIZED_ADVERTISER",
          {
            "BDF": "BEIERSDORF",
            "CP": "COLGATE-PALMOLIVE",
            "GSK": "GSK",
            "Henkel": "HENKEL",
            "J&J": "JOHNSON & JOHNSON",
            "L'Oreal": "LOREAL",
            "L'OREAL": "LOREAL",
            "P&G": "P&G",
            "RB": "RECKITT BENCKISER",
            "CLOROX": "THE CLOROX COMPANY",
            "Unilever": "UNILEVER"
          },
          true
        ]
      },
      {
        "__function_comment__": "Add HARMONIZED_MEDIA_TYPES column that have standardized category names.",
        "function_name": "add_new_column_based_on_another_column_values",
        "function_args": [
          "MEDIA_TYPES IN SCOPE",
          "HARMONIZED_MEDIA_TYPE",
          {
            "Outdoor": "OOH",
            "Press": "Print",
            "Radio": "Radio",
            "TV": "TV",
            "Internet": "Digital"
          },
          true
        ]
      },
      {
        "__function_comment__": "Add CURRENCY as a new column with 'AED' as value.",
        "function_name": "add_new_column_with_fixed_str_value",
        "function_args": ["CURRENCY","RUB"]
      },
      {
        "__function_comment__": "Round values in GROSS_SPEND_IN_LOCAL_CURRENCY to two digits.",
        "function_name": "update_decimal_places_in_columns",
        "function_args": [["GROSS_SPEND_IN_LOCAL_CURRENCY"], 2]
      },
      {
        "__function_comment__": "Add HARMONIZED_CATEGORY column that have standardized category names.",
        "function_name": "add_new_column_based_on_another_column_values",
        "function_args": [
          "CATEGORIES IN SCOPE",
          "HARMONIZED_CATEGORY",
          {
            "All other": "Other",
            "PC": "Personal Care",
            "OC": "Oral Care",
            "HC": "Home Care"
          },
          true
        ]
      },
      {
        "__function_comment__": "Rename original column headers to standard raw column headers.",
        "function_name": "rename_columns",
        "function_args": [
          {
            "GROSS_SPEND_IN_RUSSIAN RUBLE": "GROSS_SPEND_IN_LOCAL_CURRENCY",
            "SUBCATEGORIES IN SCOPE": "RAW_SUBCATEGORY",
            "BRANDS IN SCOPE": "RAW_BRAND",
            "SUBBRAND (optional) IN SCOPE": "RAW_SUBBRAND",
            "PRODUCT_NAMES IN SCOPE": "RAW_PRODUCT_NAME"
          }
        ]
      },
      {
        "__function_comment__": "Add HARMONIZED_PRODUCT_NAME column and leave it empty for mapping values to be filled out later.",
        "function_name": "add_new_column_with_fixed_str_value",
        "function_args": ["HARMONIZED_PRODUCT_NAME",""]
      },
      {
        "__function_comment__": "Rearrange the columns to the desired order that we use in Competitive Harmonization.",
        "function_name": "update_order_of_columns_in_dataframe",
        "function_args":
        [
          [
            "YEAR",
            "MONTH",
            "DATE",
            "PROCESSED_DATE",
            "HARMONIZED_REGION",
            "HARMONIZED_COUNTRY",
            "HARMONIZED_ADVERTISER",
            "HARMONIZED_MEDIA_TYPE",
            "CURRENCY",
            "GROSS_SPEND_IN_LOCAL_CURRENCY",
            "HARMONIZED_CATEGORY",
            "RAW_SUBCATEGORY",
            "RAW_BRAND",
            "RAW_SUBBRAND",
            "RAW_PRODUCT_NAME",
            "HARMONIZED_PRODUCT_NAME"
          ]
        ]
      }
    ]
  }
]
