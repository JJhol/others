[
  {
    "__comment__": "(Required) Input folder and file name or file name pattern such as 'SWI_N_ALL_INV*.xlsx' (to process multiple files using the same configuration).",
    "__comment__": "Input folder and file name or file name pattern such as 'SWI_N_ALL_INV*.xlsx' (to process multiple files using the same configuration).",
    "__comment__": "You can skip the two config parameters below related to input folder and file if you run the program like as follow:",
    "__comment__": "E.g., >> python transform.py -c configs/common_qa_config.json -i ./path/to/input/file/input_data_file.xlsx",
    "input_folder_path": "./input/AED_Kenya/",
    "input_file_name_or_pattern": "Kenya_2019FY_20200407.xlsx",

    "__comment__": "(Optional) Enter sheet name to process from input Excel file. Default is the first sheet.",
    "sheet_name_of_input_excel_file": "ExampleDataTemplate",

    "__comment__": "(Optional) Boolean flag telling if we should write data to a destination place. Default is always True.",
    "write_output": true,

    "__comment__": "(Optional) Relative path (from folder in which transform.py resides) and file name of DataWriter class that has write_data method implemented.",
    "__comment__": "Default is DataWriter class (implemented in 'csv_data_writer.py') which writes transformed data to local file in CSV format.",
    "data_writer_class_file": "./data_writers/excel_data_writer.py",
    
    "__comment__": "(Optional) Enter sheet name for the output Excel file. Default is 'Sheet1'.",
    "sheet_name_of_output_excel_file": "Sheet1",

    "__comment__": "(Optional) Relative path of output folder if the data is going to be written to a file. Default is going to be the current working directory of transform.py",
    "__comment__": "Default is going to be the current working directory of transform.py",
    "output_folder_path": "./output/AED_Kenya/",

    "__comment__": "(Optional) Prefix for the output file name.",
    "output_file_name_prefix": "transformed_Kenya_2019FY_",

    "__comment__": "(Optional) Enter the row index (>= 0) to extract column headers from. Default is 0 (the first row).",
    "__comment__": "If this value is NOT provided, program will assume there is no header row in the input file",
    "row_index_to_extract_column_headers": 0,

    "__comment__": "(Optional) Specify which row index (starting from 0) the data begins. Default is 1 (the second row) because that's where the data usually begins in files.",
    "row_index_where_data_starts": 1,

    "__comment__": "(Optional) Specify how many rows we should ignore at the bottom of the data file. Default is 0.",
    "num_of_rows_to_skip_from_the_bottom": 0,
    
    "__comment__": "(Optional) Path+name of that has **CUSTOM** functions for data transformation, which will be imported and used in the transform process.",
    "custom_transform_functions_file": "./transform_functions/aed_kenya_transform_functions.py",

    "__comment__": "(Required) List of the functions and their parameters.",
    "__comment__": "These functions must be defined either in transform_functions.py or individual task's transform file such as ./transform_function/aed_gcc_transform_functions.py",
    "functions_to_apply": [
      {
        "__function_comment__": "Excel file has empty columns. We need to drop them first",
        "function_name": "drop_unnamed_columns"
      },
      {
        "__function_comment__": "By the time we run this function, there should be only 13 columns total remaining in the raw data frame.",
        "function_name": "assert_number_of_columns_equals",
        "function_args": [11]
      },
      {
        "__function_comment__": "Add PROCESSED_DATE that holds the current date value.",
        "function_name": "add_PROCESSED_DATE_column_with_current_date"
      },
      {
        "__function_comment__": "Create HARMONIZED_YEAR column from existing date column name.",
        "function_name": "add_HARMONIZED_YEAR_column_using_existing_date_column_values",
        "function_args": ["YEAR_MONTH"]
      },
      {
        "__function_comment__": "Create HARMONIZED_MONTH column from existing date column name.",
        "function_name": "add_HARMONIZED_MONTH_column_using_existing_date_column_values",
        "function_args": ["YEAR_MONTH"]
      },
      {
        "__function_comment__": "Add DATE column based on the values in ***YEAR and MONTH columns created in previous steps***.",
        "function_name": "add_HARMONIZED_DATE_column_using_existing_YEAR_and_MONTH_columns_with_integer_values"
      },
      {
        "__function_comment__": "Add HARMONIZED_REGION as a new column with 'Africa-Eurasia' as value.",
        "function_name": "add_HARMONIZED_REGION_column",
        "function_args": ["Africa-Eurasia"]
      },
      {
        "__function_comment__": "Create HARMONIZED_COUNTRY column (with standardized country names in comp_harm_constants.py) from raw country name column.",
        "function_name": "add_HARMONIZED_COUNTRY_column_using_existing_country_column",
        "function_args": ["COUNTRY"]
      },
      {
        "__function_comment__": "Create HARMONIZED_ADVERTISER column (with standardized advertiser names in comp_harm_constants.py) from existing raw advertiser name column.",
        "function_name": "add_HARMONIZED_ADVERTISER_column_using_existing_advertiser_column",
        "function_args": ["ADVERTISER"]
      },
      {
        "__function_comment__": "Create HARMONIZED_MEDIA_TYPE column (with standardized Media Type names in comp_harm_constants.py) from raw media type column.",
        "function_name": "add_HARMONIZED_MEDIA_TYPE_column_using_existing_media_type_column",
        "function_args": ["MEDIA_TYPE"]
      },
      {
        "__function_comment__": "Add CURRENCY as a new column with 'KES' as value.",
        "function_name": "add_HARMONIZED_CURRENCY_column",
        "function_args": ["KES"]
      },
      {
        "__function_comment__": "Create HARMONIZED_GROSS_SPEND column (with values rounded to 2-decimal places) from raw gross spend column.",
        "function_name": "add_HARMONIZED_GROSS_SPEND_column",
        "function_args": ["GROSS_SPEND_IN_LOCAL_CURRENCY"]
      },
      {
        "__function_comment__": "Create HARMONIZED_CATEGORY column (with standardized category names in comp_harm_constants.py) from raw category name column.",
        "function_name": "add_HARMONIZED_CATEGORY_column_using_existing_category_column",
        "function_args": ["CATEGORY"]
      },
      {
        "__function_comment__": "Create RAW_SUBCATEGORY column from existing subcategory column name.",
        "function_name": "add_RAW_SUBCATEGORY_column_by_renaming_existing_column",
        "function_args": ["SUBCATEGORY"]
      },
      {
        "__function_comment__": "Create RAW_BRAND column from existing brand column name.",
        "function_name": "add_RAW_BRAND_column_by_renaming_existing_column",
        "function_args": ["BRAND"]
      },
      {
        "__function_comment__": "Create RAW_SUBBRAND column from existing subbrand column name.",
        "function_name": "add_RAW_SUBBRAND_column_by_renaming_existing_column",
        "function_args": ["SUBBRAND (Optional)"]
      },
      {
        "__function_comment__": "Create RAW_PRODUCT_NAME column from existing product name column.",
        "function_name": "add_RAW_PRODUCT_NAME_column_by_renaming_existing_column",
        "function_args": ["PRODUCT_NAME"]
      },
      {
        "__function_comment__": "Add HARMONIZED_PRODUCT_NAME column and empty/NULL values so that automated mapping process or human mapper can fill it out later.",
        "function_name": "add_empty_HARMONIZED_PRODUCT_NAME_column"
      },
      {
        "__function_comment__": "Rearrange the columns to the desired order that we use in Competitive Harmonization.",
        "function_name": "filter_and_rearrange_columns_for_final_output"
      }
    ]
  }
]
